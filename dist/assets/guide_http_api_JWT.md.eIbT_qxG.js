import{_ as a,c as i,o as s,a3 as e,aj as t,ak as l,al as n}from"./chunks/framework.B0izzCxm.js";const g=JSON.parse('{"title":"登录鉴权","description":"","frontmatter":{},"headers":[],"relativePath":"guide/http/api/JWT.md","filePath":"guide/http/api/JWT.md","lastUpdated":1721986402000}'),o={name:"guide/http/api/JWT.md"},h=e('<h1 id="登录鉴权" tabindex="-1">登录鉴权 <a class="header-anchor" href="#登录鉴权" aria-label="Permalink to &quot;登录鉴权&quot;">​</a></h1><p><img src="'+t+'" alt="传统登录"><img src="'+l+'" alt="登录鉴权"></p><h2 id="鉴权方式" tabindex="-1">鉴权方式 <a class="header-anchor" href="#鉴权方式" aria-label="Permalink to &quot;鉴权方式&quot;">​</a></h2><h3 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h3><ul><li>优点：易扩展、支持移动设备、跨应用调用简单、安全、承载信息丰富</li><li>缺点：刷新与过期处理不太友好、载荷不易过大、中间人攻击</li></ul><h3 id="session-cookie" tabindex="-1">session/cookie <a class="header-anchor" href="#session-cookie" aria-label="Permalink to &quot;session/cookie&quot;">​</a></h3><ul><li>session（保存在服务器端）/cookie（保存在客户端）</li><li>优点：易扩展、简单</li><li>缺点：安全性低、服务端储存性能低、多服务器同步session困难、跨平台困难</li></ul><h3 id="oauth2-0-第三方登录" tabindex="-1">oAuth2.0（第三方登录） <a class="header-anchor" href="#oauth2-0-第三方登录" aria-label="Permalink to &quot;oAuth2.0（第三方登录）&quot;">​</a></h3><ul><li>优点：开放、安全、简单、权限指定</li><li>缺点：需要增加权限服务器、会增加网络请求</li></ul><h2 id="jwt-工作原理" tabindex="-1">JWT 工作原理 <a class="header-anchor" href="#jwt-工作原理" aria-label="Permalink to &quot;JWT 工作原理&quot;">​</a></h2><ul><li>服务器认证后，生成一个JSON对象，后续通过json进行通信</li><li>介绍：jwt的全称是 JSON Web Token，一个jwt由三部分构成：头部、载荷、签名。Header.Payload.Signature</li><li><a href="https://jwt.io/" target="_blank" rel="noreferrer">在线对比签名是否一致</a></li></ul><p><img src="'+n+`" alt="JWT 工作原理"></p><h2 id="jwt-特点" tabindex="-1">JWT 特点 <a class="header-anchor" href="#jwt-特点" aria-label="Permalink to &quot;JWT 特点&quot;">​</a></h2><ul><li>数据传输简单、高效</li><li>会生成签名，保证传输安全</li><li>具有时效性</li><li>更高效利用集群做好单点登录</li></ul><h2 id="jwt-使用" tabindex="-1">JWT 使用 <a class="header-anchor" href="#jwt-使用" aria-label="Permalink to &quot;JWT 使用&quot;">​</a></h2><ol><li>/api?token=</li><li>cookie写入token</li><li>storage写入token，请求头添加 <code>Authorization: Bearer token值</code></li></ol><h2 id="nodejs-集成jwt" tabindex="-1">nodejs 集成JWT <a class="header-anchor" href="#nodejs-集成jwt" aria-label="Permalink to &quot;nodejs 集成JWT&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 校验token</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> koa-jwt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 产生token</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonwebtoken</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span></span></code></pre></div>`,18),r=[h];function d(p,c,k,u,_,m){return s(),i("div",null,r)}const T=a(o,[["render",d]]);export{g as __pageData,T as default};
