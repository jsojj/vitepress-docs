import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.B0izzCxm.js";const c=JSON.parse('{"title":"接口传参","description":"","frontmatter":{},"headers":[],"relativePath":"guide/http/api/data.md","filePath":"guide/http/api/data.md","lastUpdated":1721986402000}'),n={name:"guide/http/api/data.md"},l=t(`<h1 id="接口传参" tabindex="-1">接口传参 <a class="header-anchor" href="#接口传参" aria-label="Permalink to &quot;接口传参&quot;">​</a></h1><h2 id="formdata-格式" tabindex="-1">formData 格式 <a class="header-anchor" href="#formdata-格式" aria-label="Permalink to &quot;formData 格式&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传参前，需另设置axios请求头</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, file); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// formData格式的文件，在浏览器看是二进制格式的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取formData格式的数据</span></span></code></pre></div><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><ul><li>qs 是 nodejs 的一个模块，qs.stringify()将对象 序列化成 URL 的形式，以&amp;进行拼接</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stringify } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;qs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wdx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pwd: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;user=wdx&amp;pwd=123&#39;</span></span></code></pre></div><h2 id="json-字符串" tabindex="-1">json 字符串 <a class="header-anchor" href="#json-字符串" aria-label="Permalink to &quot;json 字符串&quot;">​</a></h2><ul><li>JSON.stringify 是 js 自带的方法，是将 json 对象转换为 json 字符串</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wdx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pwd: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;{user: &quot;wdx&quot;, pwd: &quot;123&quot;}&#39;</span></span></code></pre></div><h2 id="加解密" tabindex="-1">加解密 <a class="header-anchor" href="#加解密" aria-label="Permalink to &quot;加解密&quot;">​</a></h2><ul><li><code>对称加密</code>就是传统的用一个密钥进行加密和解密。</li><li>优点：加解密速度快，适用于大量数据的加密；算法相对简单，易于实现；</li><li>缺点：密钥管理困难，当参与通信的双方增多时，需要安全地分发和管理大量的密钥；密钥泄露风险，一旦密钥泄露，加密信息就会被破解；</li><li>适用场景：适用于需要快速加解密的场景，如文件加密、数据传输等；</li></ul><table><thead><tr><th>常用算法</th><th style="text-align:center;">密钥长度</th></tr></thead><tbody><tr><td>DES</td><td style="text-align:center;">56、64</td></tr><tr><td>AES</td><td style="text-align:center;">128、192、256</td></tr><tr><td>3DES</td><td style="text-align:center;">112、168</td></tr><tr><td>IDEA</td><td style="text-align:center;">128</td></tr></tbody></table><ul><li><code>非对称加密</code>就是加密和解密使用不同的密钥，公钥加密，私钥解密。</li><li>优点：解决了密钥分发问题，因为公钥是公开的，只有私钥需要保密；提高了通信的安全性，即使公钥被泄露，没有私钥也无法解密信息；</li><li>缺点：加解密过程相对较慢，不适合大量数据的加密；算法实现较为复杂；</li><li>适用场景：适用于密钥交换、数字签名等需要高安全性的场景；</li></ul><table><thead><tr><th>常用算法</th><th style="text-align:center;">密钥长度</th></tr></thead><tbody><tr><td>RSA</td><td style="text-align:center;">56、64</td></tr><tr><td>SM2</td><td style="text-align:center;">128、192、256</td></tr><tr><td>ECC</td><td style="text-align:center;">--</td></tr><tr><td>DH</td><td style="text-align:center;">--</td></tr></tbody></table>`,14),h=[l];function e(p,k,d,r,E,o){return a(),i("div",null,h)}const y=s(n,[["render",e]]);export{c as __pageData,y as default};
