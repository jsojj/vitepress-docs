import{_ as a,c as i,o as s,a3 as e}from"./chunks/framework.B0izzCxm.js";const _=JSON.parse('{"title":"micro-app","description":"","frontmatter":{},"headers":[],"relativePath":"guide/frame/micro-app/index.md","filePath":"guide/frame/micro-app/index.md","lastUpdated":1717555419000}'),t={name:"guide/frame/micro-app/index.md"},p=e(`<h1 id="micro-app" tabindex="-1">micro-app <a class="header-anchor" href="#micro-app" aria-label="Permalink to &quot;micro-app&quot;">​</a></h1><ul><li>微前端的核心在于将一个庞大的前端应用拆分成多个独立灵活的小型应用，每个应用都可以独立开发、独立运行、独立部署，再将这些小型应用融合为一个完整的应用，或者将原本运行已久、没有关联的几个应用融合为一个应用。</li><li>micro-app 将微前端封装成一个类 WebComponent 组件，从而实现微前端的组件化渲染。是目前市面上接入微前端成本最低的方案。</li><li><a href="http://cangdu.org/micro-app/docs.html#/" target="_blank" rel="noreferrer">API 文档地址</a></li></ul><h2 id="数据通信" tabindex="-1">数据通信 <a class="header-anchor" href="#数据通信" aria-label="Permalink to &quot;数据通信&quot;">​</a></h2><ul><li>子应用向基座应用发送数据</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.microApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送数据前一定要先清空数据，不清空只能发送一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.microApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openWindow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dispatch只接受对象作为参数</span></span></code></pre></div>`,5),n=[p];function l(r,h,o,d,c,k){return s(),i("div",null,n)}const g=a(t,[["render",l]]);export{_ as __pageData,g as default};
